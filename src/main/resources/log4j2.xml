<?xml version="1.0" encoding="UTF-8"?>
<!-- Configuration: 로그 설정을 위한 최상위 요소 -->
<!-- status 속성: Log4j2 내부의 동작에 대한 로깅 레벨을 설정 (log4j 내부 문제를 해결하기 위한 용도의 로깅이 필요한 경우 사용) -->
<!-- TRACE > DEBUG > INFO > WARN > ERROR -->
<Configuration status="WARN">

    <!-- Properties: 하단 설정에 사용할 변수들을 정의 -->
    <!-- name: 위 예제에서 name=”LOG_PATTERN”으로 설정하여 LOG_PATTERN이라는 변수를 정의 -->
    <Properties>
        <Property name="LOG_PATTERN">%d{HH:mm:ss.SSSZ} [%t] %-5level %logger{36} - %msg%n</Property>
    </Properties>

    <!-- Appenders: 로그가 출력되는 위치 -->
    <Appenders>
        <!-- Console: 콘솔에 출력될 로그 설정, name: 어펜더의 이름, target: 로그 타겟 (default: SYSTEM_OUT) -->
        <Console name="LogToConsole" target="SYSTEM_OUT">
            <!-- PatternLayout: 로그의 패턴을 설정 -->
            <PatternLayout pattern="%d{HH:mm:ss} [%t] %-5level %logger{36} - %msg%n"/>
        </Console>

        <!-- RollingFile: 조건에 따라 파일에 로그를 출력하도록 설정 -->
        <!-- log 파일을 저장하는 위치와 정책 : RollingFile은 로그를 파일로 저장하기 위한 설정을 하는 곳으로 원하는 경로, 파일의 생성 주기, 파일 최대 크기, 개수 등을 정할수 있다. -->
        <!-- name: 어펜더의 이름 -->
        <RollingFile name="SaveFile">
            <!-- fileName: 경로를 포함한 파일 이름, 상대경로로 ./위치는 이클립스의 실행 경로 이기 때문에 프로젝트 폴더 아래로 이동 시키려면 ./workspace/VIG/ 로 지정하여야 했다. -->
            <FileName>./workspace/rest/logs/restsvc.log</FileName>
            <!-- filePattern: 롤링 조건에 따른 경로를 포함한 파일 이름 패턴 -->
            <FilePattern>./workspace/rest/logs/%d{yyyy-MM-dd}.log</FilePattern>
            <PatternLayout pattern="%d{yyyy-MMM-dd HH:mm:ss} [%t] %-5level %logger{36} - %msg%n"/>
            <!-- Policies: 파일 롤링 정책 -->
            <!-- 프로젝트 폴더 아래에 있는 logs 디렉토리에 하루에 한번 파일을 생성하고 최대 10000개 까지만 생성 -->
            <Policies>
                <!-- TimeBasedTriggeringPolicy: 1일 단위(interval=1)로 새로운 파일에 로그를 기록 -->
                <!-- SizeBasedTriggeringPolicy: 파일 사이즈를 기준으로 용량이 넘칠 경우 다음 파일을 생성하여 기록 -->
                <!-- DefaultRolloverStrategy: 파일 용량 초과 시 생성될 수 있는 파일의 최대 개수 설정 -->
                <TimeBasedTriggeringPolicy interval="1" modulate="true" />
            </Policies>
            <DefaultRolloverStrategy max="1000" />
        </RollingFile>
        <!-- 파일크기에 따라서 롤링을 지정 -->
        <!-- <RollingFile name="RollingFile">
            <FileName>C:/log/mylog.log</FileName>
            <FilePattern>C:/log/size-based-logs/%d{yyyy-MM-dd-hh}-%i.log.zip</FilePattern>
            <PatternLayout>
                <Pattern>%d{yyyy-MMM-dd HH:mm:ss a} [%t] %-5level %logger{36} - %msg%n</Pattern>
            </PatternLayout>
            <Policies>
                <SizeBasedTriggeringPolicy size="10 KB" />
            </Policies>
            <DefaultRolloverStrategy max="5" />
        </RollingFile> -->

    </Appenders>

    <!-- Loggers: 로깅 작업의 주체로 각 패키지 별로 다양한 설정 -->
    <!-- Logger: 패키지 단위로 로그 설정 -->
    <Loggers>

        <!-- 기본(디폴트) loger 설정: 전체 디폴트 로그는 ROOT로 INFO 이상의 메세지만 출력하고 따로 파일로 저장하지는 않는다. -->
        <!-- Root: 모든 패키지에 대한 로깅을 하기 위한 일반적인 로그 정책 설정 (한 개만 설정할 수 있음) -->
        <!-- level: 해당 패키지의 로그 레벨 설정 -->
        <Root level="INFO">
            <!-- AppenderRef: 상단에 설정한 Appender를 참조 -->
            <AppenderRef ref="LogToConsole"/>
        </Root>

        <!-- org.springframework 패키지에 로그는 WARN 이상만 표시하고 저장하지는 않는다. -->
        <!-- name: 이름에 패키지 경로를 설정 -->
        <Logger name="org.springframework" level="WARN" additivity="false">
            <AppenderRef ref="LogToConsole"/>
        </Logger>

        <!-- 프로그래머가 생성하는 com.vig 패키지에서는 DEBUG 이상을 출력하고 출력된 로그를 저장 -->
        <Logger name="com.service" level="DEBUG" additivity="false">
            <AppenderRef ref="LogToConsole"/>
            <!--com.vig 패키지의 로그는 파일로 저장한다. -->
            <AppenderRef ref="SaveFile"/>
        </Logger>

    </Loggers>
</Configuration>